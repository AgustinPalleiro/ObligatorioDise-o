/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vistaEscritorio;

import controlador.ControladorIngresarAUnaMesa;
import controlador.VistaIngresarAUnaMesa;
import excepciones.MesaException;
import java.util.ArrayList;
import logica.Jugador;
import logica.Mesa;

/**
 *
 * @author Agus
 */
public class IngresarAUnaMesa extends javax.swing.JDialog implements VistaIngresarAUnaMesa {
    
    private ControladorIngresarAUnaMesa controlador;

    public IngresarAUnaMesa(java.awt.Frame parent, boolean modal, Jugador jugador) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        controlador = new ControladorIngresarAUnaMesa(this, jugador);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaMesasAbiertas = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        taErrores = new javax.swing.JTextArea();
        btnIngresar = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        MenuJugador = new javax.swing.JMenu();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setViewportView(listaMesasAbiertas);

        taErrores.setColumns(20);
        taErrores.setRows(5);
        jScrollPane2.setViewportView(taErrores);

        btnIngresar.setText("Ingresar");
        btnIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarActionPerformed(evt);
            }
        });

        MenuJugador.setText("Poker");
        jMenuBar2.add(MenuJugador);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIngresar))
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarActionPerformed
        ingresarMesa();
    }//GEN-LAST:event_btnIngresarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) throws MesaException {                                   
        // TODO add your handling code here:
        controlador.salir();
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu MenuJugador;
    private javax.swing.JButton btnIngresar;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listaMesasAbiertas;
    private javax.swing.JTextArea taErrores;
    // End of variables declaration//GEN-END:variables


    private void ingresarMesa() {
        int pos = listaMesasAbiertas.getSelectedIndex();
    
        if (pos == -1) {
            mostrarError("Debe seleccionar una mesa");
        return;
        }
        controlador.ingresarMesa(pos);
        /*Mesa mesa = controlador.getMesa();
        if (mesa == null) {
            mostrarError("La mesa seleccionada no existe");
        return;
        }*/
    }
    
    @Override
    public void mostrarMesas(String nombreCompleto, double saldoJugador, ArrayList<Mesa> listaMesas) {
        ArrayList<String> mesas = new ArrayList();
        String titulo = ("JUGADOR " + nombreCompleto.toUpperCase() + " - SALDO DISPONIBLE: " + saldoJugador);
        setTitle(titulo);
        for(Mesa m: listaMesas){
            mesas.add("Número de mesa: " + m.getNumeroDeMesa() + " | Cantidad minima de jugadores : " + m.getCantMinimaJugadores() 
                    + " | Valor de apuesta base : " + m.getApuestaMinima() + " | Cantidad actual de jugadores : " + m.cantJugadoresEnMesa()
                    + " | Comisión : " + m.getComision());
        }
        listaMesasAbiertas.setListData(mesas.toArray());
    }

    @Override
    public void mostrarError(String message) {
        taErrores.setText(message);
    }

    @Override
    public void proximoCasoUso(Object resultado, Object resultado2) {
        Mesa mesa = (Mesa) resultado; // resultado es de tipo Sesion
        Jugador jugador = (Jugador) resultado2;
        new EsperaLlenadoMesa(null, false, mesa, jugador).setVisible(true);
    }

    @Override
    public void mesaSeleccionada(Mesa seleccionada) {
        
    }
    
    
}
